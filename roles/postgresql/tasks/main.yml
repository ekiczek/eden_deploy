---
# Run Debian-specific tasks
- import_tasks: debian.yml
  when: ansible_distribution == "Debian" # Doesn't include Ubuntu (ansible_os_family does))

- name: Copy management scripts
  copy: "src={{ item.src }} dest={{ item.dest }} mode=755"
  with_items:
    - { src: 'backup', dest: '/usr/local/bin/backup' }
    - { src: 'clean', dest: '/usr/local/bin/clean' }
    - { src: 'pg512', dest: '/usr/local/bin/pg512' }
    - { src: 'pg1024', dest: '/usr/local/bin/pg1024' }

# Tuning
- name: Set track_counts=on
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^track_counts = on'
              insertafter='^#track_counts = on'
              line='track_counts = on'
              state=present

- name: Set autovacuum=on
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^autovacuum = on'
              insertafter='^autovacuum = on'
              line='autovacuum = on'
              state=present

# 6 for each of Prod/Demo/Test (4 workers + mule) + superuser reserved connections
- name: Set max_connections
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^max_connections = 20'
              insertafter='^max_connections = 100'
              line='max_connections = 20'
              state=present

# @ToDo: Provide more granular tuning & vary if dedicated DB host vs shared
# Levels we want to support are:
# t2.micro = 1Gb, 1 vCPU
# t2.small = 2Gb, 1 vCPU
# t2.medium = 4Gb, 2 vCPU
# m5.large = 8Gb, 2 vCPU
- name: Tune for 1024Mb RAM. effective_cache_size
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^effective_cache_size = 4GB'
              insertafter='^#effective_cache_size = 4GB'
              line='effective_cache_size = 512MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
- name: Tune for 512Mb RAM. effective_cache_size
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^effective_cache_size = 4GB'
              insertafter='^#effective_cache_size = 4GB'
              line='effective_cache_size = 256MB'
              state=present
  when: ansible_memtotal_mb|int < 1023

- name: Tune for 1024Mb RAM. shared_buffers
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^shared_buffers = 128MB'
              insertafter='^shared_buffers = 128MB'
              line='shared_buffers = 256MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
#- name: Tune for 512Mb RAM. shared_buffers
#  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
#              regexp='^shared_buffers = 128MB'
#              insertafter='^#shared_buffers = 128MB'
#              line='shared_buffers = 128MB'
#              state=present
#  when: ansible_memtotal_mb|int < 1023

- name: Tune for 1024Mb RAM. work_mem
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^work_mem = 4MB'
              insertafter='^#work_mem = 4MB'
              line='work_mem = 8MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
- name: Tune for 512Mb RAM. work_mem
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^work_mem = 4MB'
              insertafter='^#work_mem = 4MB'
              line='work_mem = 4MB'
              state=present
  when: ansible_memtotal_mb|int < 1023

# Password
- name: Transfer pgpass.sql
  template: src=pgpass.sql dest=/tmp/pgpass.sql

- name: Update PostgreSQL password
  command: su -c - postgres "psql -q -d template1 -f /tmp/pgpass.sql"

- name: Remove pgpass.sql
  file: path=/tmp/pgpass.sql state=absent

# Create Database
- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana -T template0"
  when: type == 'prod'

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana-demo -T template0"
  when: type == 'demo'
  tags:
   - demo

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana-test -T template0"
  when: type == 'test'
  tags:
   - test

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana -c 'CREATE EXTENSION postgis;'"
    - su -c - postgres "psql -q -d sahana -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana -c 'grant all on spatial_ref_sys to sahana;'"
  when: type == 'prod'

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana-{{ type }} CREATE EXTENSION postgis;'"
    - su -c - postgres "psql -q -d sahana-{{ type }} -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana-{{ type }} -c 'grant all on spatial_ref_sys to sahana;'"
  when: type != 'prod'
  tags:
    - demo
    - test

- name: Listen externally
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp="#listen_addresses = \'localhost\'"
              backrefs=yes
              line="listen_addresses = '*'"
              state=present
  when: db_ip != '127.0.0.1'

- name: Allow external connections
  lineinfile: dest=/etc/postgresql/9.6/main/pg_hba.conf
              insertafter=EOF
              line="host all all 0.0.0.0/0 md5"
              state=present
  when: db_ip != '127.0.0.1'

- name: Restart service
  service: name=postgresql state=restarted
  tags:
    - test
    - demo
