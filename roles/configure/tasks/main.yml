---

- name: Copying template 000_config.py
  command: cp /home/{{ type }}/applications/eden/modules/templates/000_config.py /home/{{ type }}/applications/eden/models
  #when: type == 'prod' or dtype == 'beforeprod'
  tags:
    - demo

- name: Copying 000_config.py from Production for Test (need same HMAC for passwords)
  command: cp /home/web2py/applications/eden/models/000_config.py /home/{{ type }}/applications/eden/models
  #when: type == 'test' or dtype == 'afterprod'
  when: type == 'test'
  tags:
    - test

- name: Configure DB access for PostgreSQL
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp="{{ item.regexp }}"
              backrefs=yes
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^#settings.database.db_type = \"postgres\"', line: 'settings.database.db_type = "postgres"' }
    - { regexp: '^#settings.database.host = \"localhost\"', line: 'settings.database.host = "{{ db_ip }}"' }
    - { regexp: '^#settings.database.password = \"password\"', line: 'settings.database.password = "{{ password }}"' }
    - { regexp: '^#settings.gis.spatialdb = True', line: 'settings.gis.spatialdb = True' }
    - { regexp: '^settings.base.migrate = False', line: 'settings.base.migrate = True' }
  when: db_type == 'postgresql'
  tags:
    - demo

- name: Configure DB access for MySQL
  lineinfile: dest=/home/web2py/applications/eden/models/000_config.py
              regexp="{{ item.regexp }}"
              backrefs=yes
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^#settings.database.db_type = \"mysql\"', line: 'settings.database.db_type = "mysql"' }
    - { regexp: '^#settings.database.host = \"localhost\"', line: 'settings.database.db_type = "{{ db_ip }}"' }
    - { regexp: '^#settings.database.password = \"password\"', line: 'settings.database.password = "{{ password }}"' }
    - { regexp: '^settings.base.migrate = False', line: 'settings.base.migrate = True' }
  when: db_type == 'mysql'
  tags:
    - test
    - demo

- name: Configure DB
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp="{{ item.regexp }}"
              backrefs=yes
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^#settings.database.database = \"sahana\"', line: 'settings.database.database = "sahana-{{ type }}"' }
  when: type != 'prod'
  tags:
    - demo
    - test

- name: Update hosts file
  lineinfile: dest=/etc/hosts
              regexp="^127.0.0.1 localhost"
              insertafter="^127.0.0.1 localhost"
              line="127.0.0.1 {{ sitename }} {{ hostname }} localhost"
              state=present

- name: check if we're running on EC2
  stat:
    path: "/etc/cloud/cloud.cfg"
    get_attributes: False
    get_checksum:   False
    get_md5:        False
    get_mime:       False
  register: cloud_cfg

- name: Disable update_etc_hosts
  lineinfile: dest=/etc/cloud/cloud.cfg
              regexp="^ - update_etc_hosts"
              insertafter="^ - update_etc_hosts"
              line="# - update_etc_hosts"
              state=present
  when: cloud_cfg.stat.exists

- name: Update hostname file
  template: src=hostname dest=/etc/hostname

- name: Disable update_hostname
  lineinfile: dest=/etc/cloud/cloud.cfg
              regexp="^ - update_hostname"
              insertafter="^ - update_hostname"
              line="# - update_hostname"
              state=present
  when: cloud_cfg.stat.exists

- name: Update mailname file
  template: src=mailname dest=/etc/mailname

- name: Configure for Internet Mail Delivery
  command: dpkg-reconfigure -f noninteractive exim4-config

- name: Editing 000_config.py (Prod / Demo)
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp="{{ item.regexp }}"
              backrefs=yes
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^FINISHED_EDITING_CONFIG_FILE = False', line: 'FINISHED_EDITING_CONFIG_FILE = True' }
    - { regexp: 'akeytochange', line: 'settings.auth.hmac_key = "{{ sitename }}{{ password }}"' }
    - { regexp: '^#settings.base.public_url = \"http://127.0.0.1:8000\"', line: 'settings.base.public_url = "{{ protocol }}://{{ sitename }}"' }
    - { regexp: '^#settings.base.cdn = True', line: 'settings.base.cdn = True' }
  tags:
    - demo

- name: Editing 000_config.py (Prod)
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp='^#settings.base.prepopulate_demo = 0'
              backrefs=yes
              line='settings.base.prepopulate_demo = 0'
              state=present
    
- name: Setting Template (Prod / Demo)
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp='^settings.base.template = \"default\"'
              backrefs=yes
              line='settings.base.template = ["{{ template | join('", "') }}"]'
              state=present
  tags:
    - demo

- name: Setting Sender (Prod)
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp='^#settings.mail.sender = \"'Sahana' <sahana@example.org>\"'
              backrefs=yes
              line='settings.mail.sender = "<{{ sender }}>"'
              state=present
  when: not((sender is undefined) or (sender is none) or (sender|trim == ''))

# Clean tasks
- name: Copy update_clean
  copy: src=update_clean.py dest=/tmp/update_clean.py
  when:
    - type == 'test'
  tags:
    - test

- name: Run update_clean
  command: python web2py.py -S eden -M -R /tmp/update_clean.py chdir=/home/web2py
  when:
    - type == 'test'
    - db_type == 'postgresql' # MySQL clean script not yet multi-instance
  tags:
    - test

- name: Run clean script
  command: clean test
  when:
    - type == 'test'
    - db_type == 'postgresql' # MySQL clean script not yet multi-instance
  tags:
    - test

- name: Create Tables & Prepopulate
  command: sudo -H -u web2py python web2py.py -S eden -M -R applications/eden/static/scripts/tools/noop.py
  args:
    chdir: /home/{{ type }}
  tags:
    - demo

- name: Configure for Production
  lineinfile: dest=/home/{{ type }}/applications/eden/models/000_config.py
              regexp="{{ item.regexp }}"
              backrefs=yes
              line="{{ item.line }}"
              state=present
  with_items:
    - { regexp: '^#settings.base.prepopulate = 0', line: 'settings.base.prepopulate = 0' }
    - { regexp: '^settings.base.migrate = True', line: 'settings.base.migrate = False' }
  tags:
    - demo
    - test

- name: Compile
  command: sudo -H -u web2py python web2py.py -S eden -M -R applications/eden/static/scripts/tools/compile.py chdir=/home/{{ type }}
  tags:
    - demo
    - test

- name: Update crontab
  copy: src=cron dest=/etc/crontab

- name: Copy management scripts
  copy: "src={{ item.src }} dest={{ item.dest }} mode=755"
  with_items:
    - { src: 'compile', dest: '/usr/local/bin/compile' }
    - { src: 'pull', dest: '/usr/local/bin/pull' }
    - { src: 'revert', dest: '/usr/local/bin/revert' }
    - { src: 'w2p', dest: '/usr/local/bin/w2p' }

- name: Stop Rocket Server
  #service: name=web2py  state=stopped
  shell: /etc/init.d/web2py stop
  ignore_errors: True

- name: Remove port 80 redirection rule
  shell: iptables -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000
  ignore_errors: True

- name: Start services
  #service: name={{ item.name }} state={{ item.state }}
  #with_items:
  #  - { name: 'uwsgi-{{ type }}', state: 'started' }
  shell: /etc/init.d/uwsgi-{{ type }} start
  when: web_server == "cherokee"
  tags:
    - test
    - demo

# @ToDo: Move this to apache role
- name: Enable production VirtualHost
  command: a2ensite production
  when: web_server == "apache"

- name: Restart apache
  command: apache2ctl restart
  when: web_server == "apache"
